// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  username      String?   @unique  // アプリ専用ユーザー名
  email         String    @unique  // Googleから取得（認証用）
  avatarUrl     String?   // カスタムアバター（任意）
  isProfileCompleted Boolean @default(false) // 初期設定完了フラグ
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  gameRecords GameRecord[]
  accounts    Account[]
  sessions    Session[]
  
  @@map("users")
}

model GameRecord {
  id                String    @id @default(cuid())
  userId            String?   
  guestName         String?
  mode              GameMode
  score             Int
  questionsAnswered Json      // Word[]をJSONで保存
  totalTime         Int       // ミリ秒
  completedAt       DateTime  @default(now())
  
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("game_records")
}

model Word {
  id       String   @id @default(cuid())
  original String
  mode     GameMode
  category String
  hint     String
  
  @@unique([original, mode])
  @@map("words")
}

enum GameMode {
  HTML_CSS
  RUBY
}

// NextAuth必須テーブル
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}
